<!-- views/results.ejs - Results Page -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Results - <%- poll.title %> - Poll Nimbus</title>
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <div class="container">
    <header>
      <div class="logo">
        <h1>Poll Nimbus</h1>
        <p class="tagline">Cloud Voting Made Simple</p>
      </div>
      <nav>
        <ul>
          <li><a href="/">Home</a></li>
          <li><a href="/create">Create Poll</a></li>
        </ul>
      </nav>
    </header>
    
    <main>
      <section class="results-section">
        <div class="poll-header">
          <h2><%= poll.title %></h2>
          <p class="poll-meta">Created on <%= poll.created.toLocaleDateString() %></p>
        </div>
        
        <div class="results-container">
          <% 
            const totalVotes = poll.options.reduce((sum, option) => sum + option.votes, 0);
            poll.options.forEach((option, index) => {
              const percentage = totalVotes > 0 ? Math.round((option.votes / totalVotes) * 100) : 0;
          %>
            <div class="result-item">
              <div class="result-info">
                <span class="option-text"><%- option.text %></span>
                <span class="option-stats">
                  <span class="votes"><%- option.votes %> <%- option.votes === 1 ? 'vote' : 'votes' %></span>
                  <span class="percentage"><%- percentage %>%</span>
                </span>
              </div>
              <div class="progress-bar">
                <div class="progress" style="width: <%- percentage %>%;"></div>
              </div>
            </div>
          <% }); %>
          
          <div class="total-votes">
            Total votes: <%- totalVotes %>
          </div>
        </div>
        
        <div class="chart-container">
          <canvas id="results-chart"></canvas>
        </div>
      </section>
      
      <div class="poll-actions">
        <a href="/vote/<%- poll.id %>" class="btn btn-secondary">Back to Voting</a>
        <button id="share-btn" class="btn btn-outline">Share Poll</button>
        <a href="/" class="btn btn-outline">Back to Home</a>
      </div>
    </main>
    
    <div id="share-modal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Share This Poll</h3>
        <div class="share-links">
          <p>Copy the link:</p>
          <div class="share-input">
            <input type="text" id="share-url" readonly value="<%- `${process.env.BASE_URL || 'http://localhost:3000'}/vote/${poll.id}` %>">
            <button id="copy-btn" class="btn btn-secondary">Copy</button>
          </div>
        </div>
      </div>
    </div>
    
    <footer>
      <p>&copy; 2025 Poll Nimbus - A Simple Voting Application</p>
    </footer>
  </div>
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  <script>
    // Chart.js implementation
    const ctx = document.getElementById('results-chart').getContext('2d');
    const data = {
      labels: <%- JSON.stringify(poll.options.map(option => option.text)) %>,
      datasets: [{
        label: 'Votes',
        data: <%- JSON.stringify(poll.options.map(option => option.votes)) %>,
        backgroundColor: [
          '#4361ee', '#3a0ca3', '#7209b7', '#f72585', '#4cc9f0',
          '#4895ef', '#560bad', '#b5179e', '#f15bb5', '#00b4d8'
        ],
        borderWidth: 1
      }]
    };
    
    const resultsChart = new Chart(ctx, {
      type: 'pie',
      data: data,
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'bottom',
          },
          title: {
            display: true,
            text: 'Poll Results'
          }
        }
      }
    });
    
    // Share modal functionality
    const shareBtn = document.getElementById('share-btn');
    const shareModal = document.getElementById('share-modal');
    const closeBtn = document.querySelector('.close');
    const copyBtn = document.getElementById('copy-btn');
    const shareUrl = document.getElementById('share-url');
    
    shareBtn.addEventListener('click', () => {
      shareModal.style.display = 'block';
    });
    
    closeBtn.addEventListener('click', () => {
      shareModal.style.display = 'none';
    });
    
    window.addEventListener('click', (event) => {
      if (event.target === shareModal) {
        shareModal.style.display = 'none';
      }
    });
    
    copyBtn.addEventListener('click', () => {
      shareUrl.select();
      document.execCommand('copy');
      copyBtn.textContent = 'Copied!';
      
      setTimeout(() => {
        copyBtn.textContent = 'Copy';
      }, 2000);
    });
    
    // Auto refresh results every 10 seconds
    let pollData;
    
    async function fetchPollData() {
      try {
        const response = await fetch('/api/poll/<%= poll.id %>');
        if (response.ok) {
          pollData = await response.json();
          updateChart();
        }
      } catch (error) {
        console.error('Error fetching poll data:', error);
      }
    }
    
    function updateChart() {
      if (!pollData) return;
      
      // Update chart data
      resultsChart.data.datasets[0].data = pollData.options.map(option => option.votes);
      resultsChart.update();
      
      // Update percentages and vote counts
      const totalVotes = pollData.options.reduce((sum, option) => sum + option.votes, 0);
      document.querySelector('.total-votes').textContent = `Total votes: ${totalVotes}`;
      
      const resultItems = document.querySelectorAll('.result-item');
      pollData.options.forEach((option, index) => {
        const percentage = totalVotes > 0 ? Math.round((option.votes / totalVotes) * 100) : 0;
        const resultItem = resultItems[index];
        
        if (resultItem) {
          resultItem.querySelector('.votes').textContent = `${option.votes} ${option.votes === 1 ? 'vote' : 'votes'}`;
          resultItem.querySelector('.percentage').textContent = `${percentage}%`;
          resultItem.querySelector('.progress').style.width = `${percentage}%`;
        }
      });
    }
    
    // Fetch poll data every 10 seconds
    setInterval(fetchPollData, 10000);
  </script>
  <script src="/js/main.js"></script>
</body>
</html>